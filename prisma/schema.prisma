// Updated Prisma schema for a full e-commerce website including models for Product, Cart, and Order.
// Added relations between User, Cart, Order, and Product.

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  username                 String    @unique
  email                    String    @unique
  password                 String
  contactno                String
  profilePicture           String?
  dateOfBirth              DateTime?
  role                     Role      @default(USER)
  preferences              Json
  isActive                 Boolean   @default(true)
  isEmailVerified          Boolean   @default(false)
  twoFactorEnabled         Boolean   @default(false)
  twoFactorSecret          String?
  backupCodes              Json[]
  emailVerificationToken   String?   @unique
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  auditLogs                Json[]
  addresses                Address[]
  carts                    Cart[]
  orders                   Order[]
  productsSold Product[]  @relation("UserProducts")
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  landmark  String?
  city      String
  state     String
  country   String
  pincode   String
  isPrimary Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  district  String?
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  star        Int      @default(0)
  picture     String?
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String
  price                 Float             
  discountPercentage    Float             @default(0)
  discountedPrice       Float             @default(0)
  category              CategoryType
  quantity              Int
  images                String
  reviews               Review[]
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  sellerId              String
  seller                User              @relation(name: "UserProducts", fields: [sellerId], references: [id])
  inCarts               CartProduct[]
  inOrders              OrderProduct[]
  variants              ProductVariant[]
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  price       Float
  discountPercentage   Float                @default(0)
  discountedPrice      Float                @default(0)
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
}

model CartProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String
  productId String
  cart      Cart   @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model OrderProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  products  CartProduct[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Order {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  products  OrderProduct[]
  total     Float
  status    OrderStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model RevokedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  expiresAt DateTime
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  DEV
  SELLER
  TESTER
}

enum CategoryType {
  ELECTRONICS
  FASHION
  HOME_APPLIANCES
  BOOKS
  TOYS
  GROCERIES
  BEAUTY
  SPORTS
  AUTOMOTIVE
  FURNITURE
  JEWELRY
  MUSIC
  OFFICE_SUPPLIES
  PET_SUPPLIES
  GARDEN
  HEALTH
  BABY
  VIDEO_GAMES
  MOVIES
  SOFTWARE
  ART
  CRAFTS
  INDUSTRIAL
  OUTDOORS
  TRAVEL
}